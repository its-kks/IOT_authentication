classdef leo_satellite < handle
    properties
        x
        y
        matlab_sat
        group_key
        network_manager
        sc
        ind
        times
        private_key_sigmaj
        public_key_Kj
        public_key_K_Gs_Le
        private_key_sigma_Gs_Le
        public_R_Le
        rand_c_Le
    end
    
    methods
        % Constructor
        function obj = leo_satellite(x,y,sc,semiMajorAxis,eccentricity,...
                inclination, ...
                RAAN, ...
                argumentOfPerigee, ...
                trueAnomaly, ...
                nameSat,ind,times)
            obj.x = x;
            obj.y = y;
            obj.matlab_sat = satellite(sc, ...
                    semiMajorAxis, ...
                    eccentricity, ...
                    inclination, ...
                    RAAN, ...
                    argumentOfPerigee, ...
                    trueAnomaly, ...
                    "Name",nameSat, ...
                    "OrbitPropagator","two-body-keplerian");
            obj.group_key = -1;
            obj.network_manager = -1;
            obj.sc = sc;
            obj.ind = ind;
            obj.times = times;
            obj.private_key_sigmaj = -1;
            obj.public_key_Kj = -1;
            obj.public_key_K_Gs_Le = -1;
            obj.private_key_sigma_Gs_Le = -1;
            obj.rand_c_Le = -1;
            obj.public_R_Le = -1;

        end

        % form group_key after receiving coordinates_p
        function form_key(obj,new_group_key)
            obj.group_key = new_group_key;
            disp(['Group key generated by LEO ',num2str(obj.ind)])
            disp(obj.group_key)
        end

        function [access_response] = access_response_generation(obj,ground_station,IOT)
            % Algorithm 2 : Access Response Generation
            obj.rand_c_Le = Python_random(1000,9999999);
            obj.public_R_Le = strings(1,2);
            [obj.public_R_Le(1),obj.public_R_Le(2)] = ECC_x_dot_P(obj.rand_c_Le);
            ts2 = string(obj.sc.SimulationTime);

            hash = Hash_bits_to_Z(obj.public_R_Le(1),obj.public_R_Le(2),...
            ground_station.public_key_R_Gs(1),ground_station.public_key_R_Gs(2), ...
            strcat(" ' ",ts2," ' "));
            disp(ground_station)
            M_Le = strcat(obj.public_R_Le(1),obj.public_R_Le(2),...
            ground_station.public_key_R_Gs(1),ground_station.public_key_R_Gs(2),ts2, ...
            string(obj.matlab_sat.ID),string(ground_station.gs.ID),obj.public_key_K_Gs_Le(1), ...
            obj.public_key_K_Gs_Le(2),ground_station.public_key_Kj(1),ground_station.public_key_Kj(2));
            
            s_Le = string(pyrun(strcat("ans=str(",obj.private_key_sigma_Gs_Le,"-",hash,"*",obj.rand_c_Le,")"),"ans"));
            
            access_response = strcat(M_Le,s_Le);

            % send access_respnse to IOT device and ground station

            ground_station.algorithm_3_sk_generation(access_response,IOT.rand_b);

            IOT.algorithm_3_sk_generation(access_response,ground_station.rand_a);




        end
        
        
    end
end




